// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using System;
using Moq;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_AddState_95a50d88c6_Test
    {
        private StateMachine<State> _stateMachine;
        private Mock<State> _mockState;

        [SetUp]
        public void SetUp()
        {
            _stateMachine = new StateMachine<State>();
            _mockState = new Mock<State>();
        }

        [Test]
        public void AddState_AddsState_WhenStateMachineMatchesCreationStateMachine()
        {
            //Arrange
            _mockState.Setup(s => s.StateMachine).Returns(_stateMachine);

            //Act
            _stateMachine.AddState(_mockState.Object);

            //Assert
            Assert.Contains(_mockState.Object, _stateMachine.States);
        }

        [Test]
        public void AddState_ThrowsException_WhenStateMachineDoesNotMatchCreationStateMachine()
        {
            //Arrange
            var secondStateMachine = new StateMachine<State>();
            _mockState.Setup(s => s.StateMachine).Returns(secondStateMachine);

            //Act & Assert
            var exception = Assert.Throws<Exception>(() => _stateMachine.AddState(_mockState.Object));
            StringAssert.Contains("The State can only be added to the State Machine that was used to create it.", exception.Message);
        }
    }
}
