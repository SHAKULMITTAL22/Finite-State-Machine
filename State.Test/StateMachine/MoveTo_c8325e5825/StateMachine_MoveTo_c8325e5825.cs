// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using System;
using FiniteStateMachine;
using NUnit.Framework;
using Moq;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_MoveTo_c8325e5825
    {
        private StateMachine<T> _stateMachine;
        private Dictionary<T, State> _statesDictionary;
        private Mock<State> _stateMock;

        [SetUp]
        public void Setup()
        {       
            _statesDictionary = new Dictionary<T, State>();
            _stateMachine = new StateMachine<T>(_statesDictionary);
            _stateMock = new Mock<State>();
        }

        [Test]
        public void MoveTo_StateExists_ReturnsTargetStateKey()
        {      
            var targetStateKey = "testState";
            _stateMock.Setup(x => x.StateKey).Returns(targetStateKey);
            _statesDictionary.Add(targetStateKey, _stateMock.Object);
            
            var result = _stateMachine.MoveTo(targetStateKey);

            Assert.AreEqual(targetStateKey, result);
        }

        [Test]
        public void MoveTo_StateDoesNotExist_ThrowsException()
        {
            var targetStateKey = "nonExistentState";

            Assert.Throws<Exception>(() => _stateMachine.MoveTo(targetStateKey));
        }

        [Test]
        public void MoveTo_ValidTargetStateKey_CallsBeginAndEndMethodsOfState()
        {
            var targetStateKey = "testState";
            _stateMock.Setup(x => x.StateKey).Returns(targetStateKey);
            _statesDictionary.Add(targetStateKey, _stateMock.Object);
            
            _stateMachine.MoveTo(targetStateKey);

            _stateMock.Verify(x => x._End(), Times.Once());
            _stateMock.Verify(x => x._Begin(It.IsAny<FiniteStateChangeEventArgs>(), It.IsAny<T>()), Times.Once());
        }
    }
}
