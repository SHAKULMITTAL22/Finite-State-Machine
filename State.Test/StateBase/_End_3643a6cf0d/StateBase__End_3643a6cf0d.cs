// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using System;
using NUnit.Framework;
using Moq;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    public class StateBase__End_3643a6cf0d 
    {
        [Test]
        public void _End_MethodCalled_EndMethodCalled()
        {
            // Arrange
            var finiteStateMachineMock = new Mock<IFiniteStateMachine>();
            var finiteStateEndedEventArgs = new FiniteStateEndedEventArgs("testKey");

            finiteStateMachineMock.Setup(x => x.OnStateEnded).Returns(new Action<FiniteStateEndedEventArgs>((args) => Assert.AreEqual(finiteStateEndedEventArgs, args)));

            var stateUnderTest = new StateBase__End_3643a6cf0d_Implementation();
            stateUnderTest.StateKey = "testKey";
            stateUnderTest.OverrideFiniteStateMachine(finiteStateMachineMock.Object);

            // Act
            stateUnderTest._End();

            // Assert
            finiteStateMachineMock.Verify(x => x.OnStateEnded(It.IsAny<FiniteStateEndedEventArgs>()), Times.Once);
        }

        [Test]
        public void _End_EventArgsNullReference_SafeInvocation()
        {
            // Arrange
            var finiteStateMachineMock = new Mock<IFiniteStateMachine>();
            
            finiteStateMachineMock.Setup(x => x.OnStateEnded).Returns(default(Action<FiniteStateEndedEventArgs>));

            var stateUnderTest = new StateBase__End_3643a6cf0d_Implementation();
            stateUnderTest.OverrideFiniteStateMachine(finiteStateMachineMock.Object);

            // Act, Assert (expect no exception)
            Assert.DoesNotThrow(() => stateUnderTest._End());
        }
    }
}

public class StateBase__End_3643a6cf0d_Implementation : StateBase__End_3643a6cf0d
{
    // Mocked method to initiate a finite state change
    public override void End() 
    {
        // End State Implementation
    }
    
    // Provides an overridden IFiniteStateMachine reference
    public void OverrideFiniteStateMachine(IFiniteStateMachine finiteStateMachine)
    {
        FiniteStateMachine.Instance = finiteStateMachine;
    }
}

public interface IFiniteStateMachine
{
    event Action<FiniteStateEndedEventArgs> OnStateEnded;
}

public class FiniteStateEndedEventArgs : EventArgs
{
    public readonly string StateKey;

    public FiniteStateEndedEventArgs(string stateKey)
    {
        StateKey = stateKey;
    }
}
