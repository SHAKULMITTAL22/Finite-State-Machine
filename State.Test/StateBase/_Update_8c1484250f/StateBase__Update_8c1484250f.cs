// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using System;
using NUnit.Framework;
using Moq;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateBase__Update_8c1484250f_Test
    {
        private Mock<StateBase> _stateBaseMock;

        [SetUp]
        public void Setup()
        {
            _stateBaseMock = new Mock<StateBase>();
        }

        [Test]
        public void _Update_CalledWithPositiveNumber_UpdateShouldBeCalledWithTheSameNumber()
        {
            var dt = new Random().NextDouble();
            _stateBaseMock.Object._Update((float) dt);
            _stateBaseMock.Verify(m => m.Update((float) dt), Times.Once);
        }
        
        [Test]
        public void _Update_CalledWithNegativeNumber_UpdateShouldBeCalledWithTheSameNumber()
        {
            var dt = -new Random().NextDouble();
            _stateBaseMock.Object._Update((float) dt);
            _stateBaseMock.Verify(m => m.Update((float) dt), Times.Once);
        }
        
        [Test]
        public void _Update_CalledWithZeero_UpdateShouldBeCalledWithZeero()
        {
            _stateBaseMock.Object._Update(0);
            _stateBaseMock.Verify(m => m.Update(0), Times.Once);
        }

        [Test]
        public void _Update_CalledMultipleTimes_UpdateShouldBeCalledSameNumberOfTimes()
        {
            int numberOfTimes = new Random().Next(1, 10);
            for (int i = 0; i < numberOfTimes; i++)
            {
                _stateBaseMock.Object._Update(i);
            }

            _stateBaseMock.Verify(m => m.Update(It.IsAny<float>()), Times.Exactly(numberOfTimes));
        }

        [TearDown]
        public void Teardown()
        {
            _stateBaseMock = null; 
        }
    }
}

