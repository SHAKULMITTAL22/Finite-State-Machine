// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using FiniteStateMachine;
using YourNamespace.Services; // change YourNamespace to your main project namespace

namespace FiniteStateMachine.Test
{
    public class FiniteStateChangeEventArgs_Test
    {
        [Test]
        public void Constructor_ShouldAssign_RequestedState()
        {
            // Arrange
            StateType requestedState = StateType.YourStateType; // TODO: Replace YourStateType with a valid state type
            StateInfo stateInfo = new StateInfo(); // Set up state info object if necessary

            // Act
            var args = new FiniteStateChangeEventArgs(requestedState, stateInfo);

            // Assert
            Assert.AreEqual(requestedState, args.RequestedType);
        }

        [Test]
        public void Constructor_ShouldAssign_StateInfo()
        {
            // Arrange
            StateType requestedState = StateType.YourStateType; // TODO: Replace YourStateType with a valid state type
            StateInfo stateInfo = new StateInfo(); // Set up state info object if necessary

            // Act
            var args = new FiniteStateChangeEventArgs(requestedState, stateInfo);

            // Assert
            Assert.AreEqual(stateInfo, args.StateInfo);
        }

        [Test]
        public void Constructor_ShouldThrowException_WhenNullRequestedState()
        {
            // Arrange
            StateType requestedState = null;
            StateInfo stateInfo = new StateInfo(); // Set up state info object if necessary

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new FiniteStateChangeEventArgs(requestedState, stateInfo));
        }

        [Test]
        public void Constructor_ShouldThrowException_WhenNullStateInfo()
        {
            // Arrange
            StateType requestedState = StateType.YourStateType; // TODO: Replace YourStateType with a valid state type
            StateInfo stateInfo = null;

            // Act & Assert
            Assert.Throws<ArgumentNullException>(() => new FiniteStateChangeEventArgs(requestedState, stateInfo));
        }
    }
}
